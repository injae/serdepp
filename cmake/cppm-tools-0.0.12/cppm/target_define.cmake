function(cppm_target_define)
    cmake_parse_arguments(ARG "BINARY;STATIC;SHARED;INTERFACE;EXCLUDE" "OPTIONAL;NAMESPACE;PUBLIC_HEADER;PRIVATE_HEADER" "SOURCES" ${ARGN})
    list(GET ARG_UNPARSED_ARGUMENTS 0 name)

    cppm_set_then(_public_header  "include"                             "ARG_PUBLIC_HEADER"  "${ARG_PUBLIC_HEADER}")
    cppm_set_then(_private_header "src"                                 "ARG_PRIVATE_HEADER" "${ARG_PRIVATE_HEADER}")
    cppm_set_then(_namespace      "${PROJECT_NAME}"                     "ARG_NAMESPACE"      "${ARG_NAMESPACE}")
    cppm_set_then(_optional       "${CMAKE_PROJECT_NAME}_${name}_BUILD" "ARG_OPTIONAL"       "${ARG_OPTIONAL}")
    cmake_dependent_option("${_optional}" "build with ${name}" ON "NOT ARG_EXCLUDE" OFF)

    if(${${_optional}})
        if(TARGET ${name}_info)
        else()
            add_custom_target(${name}_info COMMENT "Cppkg Info Target")
        endif()
        if(ARG_INTERFACE)
            option("${CMAKE_PROJECT_NAME}_${name}_STATIC_BUILD" OFF)
            if(${CMAKE_PROJECT_NAME}_${name}_STATIC_BUILD)
                set(ARG_STATIC TRUE)
            endif()
        endif()

        if(ARG_BINARY)
            add_executable(${name} "")
            set_target_properties(${name}_info PROPERTIES CPPM_TYPE "BINARY"
                                                          CPPM_DEPEND "${PROJECT_NAME}")
            target_include_directories(${name}
                PUBLIC  ${CMAKE_CURRENT_SOURCE_DIR}/${_public_header}
                PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/${_private_header}
            )
        elseif(ARG_STATIC OR ARG_SHARED)
            if(ARG_STATIC)
                add_library(${name} STATIC "")
                set_target_properties(${name}_info PROPERTIES CPPM_TYPE "STATIC")
            elseif(ARG_SHARED)
                add_library(${name} SHARED "")
                set_target_properties(${name}_info PROPERTIES CPPM_TYPE "SHARED")
                if(cppm_target_base_platform STREQUAL "windows")
                    set(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS ON)
                    if(EXISTS "include/${name}_export.h")
                        include(GenerateExportHeader)
                        generate_export_header(${name})
                    else()
                        cppm_print("Windows shared library required include/${name}.h header")
                        cppm_print("Info: https://blog.kitware.com/create-dlls-on-windows-without-declspec-using-new-cmake-export-all-feature/")
                    endif()
                endif()
            endif()
            add_library(${_namespace}::${name} ALIAS ${name})
            set_target_properties(${name} PROPERTIES LINKER_LANGUAGE CXX)
            set_target_properties(${name}_info PROPERTIES CPPM_NAMESPACE "${_namespace}")
            set_target_properties(${name}_info PROPERTIES CPPM_MODULE "${name}"
                                                          CPPM_DEPEND "${PROJECT_NAME}"
                                                          CPPM_DESCRIPTION "${name}/${${PROJECT_NAME}_VERSION}")
            set(CMAKE_POSITION_INDEPENDENT_CODE TRUE)
            target_include_directories(${name}
                PUBLIC
                    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/${_public_header}>
                    $<INSTALL_INTERFACE:include>
                PRIVATE
                    ${CMAKE_CURRENT_SOURCE_DIR}/${_private_header}
            )
        elseif(ARG_INTERFACE)
            add_library(${name} INTERFACE)
            add_library(${_namespace}::${name} ALIAS ${name})
            set_target_properties(${name}_info PROPERTIES CPPM_NAMESPACE "${_namespace}" CPPM_TYPE "HEADER_ONLY")
            set_target_properties(${name}_info PROPERTIES CPPM_MODULE "${name}"
                                                          CPPM_DEPEND "${PROJECT_NAME}"
                                                          CPPM_DESCRIPTION "${name}/${${PROJECT_NAME}_VERSION}")
            target_include_directories(${name}
                INTERFACE
                    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/${_public_header}>
                    $<INSTALL_INTERFACE:include>
            )
        endif()
        if(SUB_PROJECT)
            include_directories(${_public_header})
            get_target_property(_load_path ${name}_info CPPM_LOADPATH)
            cppkg_print("Load Workspace: ${name}/${PROJECT_VERSION} from ${_load_path}")
        endif()
        target_compile_features(${name} INTERFACE "cxx_std_${cxx_standard}")
        if(DEFINED ARG_SOURCES)
            target_sources(${name} PRIVATE ${ARG_SOURCES})
        endif()

        if(__cppm_unit_test_area__)
            if(__unit_test_library__ STREQUAL "Catch2")
                catch_discover_tests(${name})
            elseif(__unit_test_library__ STREQUAL "Unknown")
                add_test(NAME ${name} COMMAND ${name})
            else()
                cppm_error_print("unit_test_library bug please commit this error")
            endif()
            set_target_properties(${name}_info PROPERTIES CPPM_IS_TEST ON)
            cppm_test_print("Add Test ${name}")
        else()
            set_target_properties(${name}_info PROPERTIES CPPM_IS_TEST OFF)
        endif()
    endif()
endfunction()

macro(cppm_unit_test_area)
    string(TOUPPER ${CMAKE_PROJECT_NAME} upper_name) 
    option(${upper_name}_BUILD_TESTING "${CMAKE_PROJECT_NAME} build test" OFF)
    if(${${upper_name}_BUILD_TESTING})
        include(CTest)
        set(__cppm_unit_test_area__ ON)
        if(TARGET Catch2_info)
            get_target_property(_depend Catch2_info CPPM_DEPEND)
            if(_depend STREQUAL "${CMAKE_PROJECT_NAME}")
                include(${Catch2_DIR}/Catch.cmake)
                set(__unit_test_library__ "Catch2")
            endif()
        else()
            set(__unit_test_library__ "Unknown")
        endif()
        cppm_test_print("Unit Test Library: ${__unit_test_library__}")
    endif()
endmacro()

macro(end_cppm_unit_test_area)
    unset(__cppm_unit_test_area__)
    unset(__unit_test_library__)
endmacro()

macro(cppm_examples_area)
    string(TOUPPER ${CMAKE_PROJECT_NAME} upper_name) 
    option(${upper_name}_BUILD_EXAMPLES "${CMAKE_PROJECT_NAME} build examples" OFF)
    if(${${upper_name}_BUILD_EXAMPLES})
        message("==>Example<==")
    endif()
endmacro()
